@model AVSModels.Models.ProductTypes

@{
    ViewBag.Title = "AddProducttypes";
    Layout = "~/Views/Shared/_CustomMainLayout.cshtml";
}

<style>

    .btm {
        margin-bottom: 8px !important;
    }

    .control-label {
        padding-left: 3px;
    }

    label {
        color: black !important;
        font-weight: 500;
    }

    .panel {
        border-bottom-color: darkblue !important;
    }

    label {
        text-align: left !important;
        padding-right: 2px !important;
        padding-left: 2px !important;
    }

    .btn1 {
        margin-top: 10PX !important;
    }
</style>
<section class="wrapper">

    <div class="row">
        <div class="panel">
            <div class="panel-heading" style="height:50px!important;">
                @if (Model.ProductTypeId != 0)
                {<span>Update ProductType</span>
                }
                else
                {


                    <a class="pull-right btn1 btn-sm btn-warning" title="Back to Vendors list" href="#" onclick="BacktoProductTypes()"><span class="fa fa-1x fa-chevron-circle-left">&nbsp;ProductTypes</span></a>

                }
            </div>
            <div class="panel-body" style="margin-top:30px!important;">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.ProductTypeId)
                @Html.HiddenFor(m => m.UserID)
                <div class="row btm">
                    <div class="col-md-12">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductTypeName, htmlAttributes: new { @class = "control-label labelcss  col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ProductTypeName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProductTypeName, "", new { @class = "text-danger" ,@id= "Error_ProductTypeName" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "control-label labelcss col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger",@id= "Error_ProductDescription" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-group" style="text-align:right!important; margin-top:25px!important; margin-right:15px!important;">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" onclick="saveProductType()" value="Save ProductType" class="btn btn-primary btn2" />
                    </div>
                </div>
            </div>

        </div>
    </div>
</section>

@section Scripts{
<script>
    function BacktoProductTypes() {
        window.location.href = "/Payment/ProducttypeIndex";

    }

    function ProductTypeValidations() {
        var ret = true;

        var ProductTypeName = $("#ProductTypeName").val();
        if (ProductTypeName == "" || ProductTypeName == undefined) {
            $("#Error_ProductTypeName").html("please enter ProductTypeName");
            ret = false;
        }
        else {
            $("#Error_ProductTypeName").html("");
        }
        var ProductDescription = $("#ProductDescription").val();
        if (ProductDescription == "" || ProductDescription == undefined) {
            $("#Error_ProductDescription").html("please enter ProductDescription");
            ret = false;
        }
        else {
            $("#Error_ProductDescription").html("");
        }
        return ret;
    }
    function saveProductType() {
        var isValid = ProductTypeValidations();
        if (isValid) {
            debugger;
            var producttypeId = $("#ProductTypeID").val();
            var producttypename = $("#ProductTypeName").val();
            var productdiscription = $("#ProductDescription").val();

            var ProductTypeModel = {
                ProductTypeID: producttypeId,
                ProductTypeName: producttypename,
                ProductDescription: productdiscription,
                
            }
            saveProductTypeinfo(ProductTypeModel);
        }

        else {
            notification('warning', 'Please enter valid information');
            return false;
        }
    }
    function saveProductTypeinfo(ProductTypeModel) {
        $.ajax({
            async: false,
            url: "/Payment/AddProducttypes",
            type: "POST",
            data: { producttypes: ProductTypeModel },
            success: function (result) {
                if (result.status) {
                    if (ProductTypeModel.ProductTypeID != 0) {
                        notification('success', 'Product Type Details Updated Successfully');
                        window.location.href = "/Payment/ProducttypeIndex";
                    }
                    else {
                        notification('success', 'Product Type  Added Successfully');
                        window.location.href = "/Payment/ProducttypeIndex";
                    }
                }
                else {
                    notification('warning', 'Failed to Add Product Type');
                }
            }
        });
    }
    </script>    
    
}